package io.github.NeillJohnston.MasochistGameManager;

import com.sun.xml.internal.ws.policy.privateutil.PolicyUtils;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.yaml.snakeyaml.Yaml;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * Helper class to hold map settings. Basically just a fancy data structure.
 * Used for loading map preferences and giving those to the gamemode manager.
 *
 * @author Neill Johnston
 */
public class MapYml {

    /**
     * Gamemode constants
     */
    public static final String GAMEMODE_PKR = "pkr";
    public static final String GAMEMODE_PDM = "pdm";

    private final HashMap<String, Object> mapYml;

    // Basic universal settings
    public final String name;
    public final String author;
    public final double[] spawn;
    public final String gamemode;

    /**
     * Pkr-specific settings
     *
     * startButton: double[] of the start buttons's block coordinates
     * end(x/y/z): block coordinates of the end button
     */
    public final double[] startButton, endButton;
    public final Material checkpointMat, backpointMat;

    /**
     * Generate the MapYml object from a Yaml hashmap.
     *
     * @param sourceYml    Initial hashmap generated by SnakeYaml
     */
    public MapYml(File sourceYml) throws FileNotFoundException {

        // Initialize mapYml HashMap
        this.mapYml = (HashMap<String, Object>) new Yaml().load(new FileInputStream(sourceYml));

        // Basic universal settings
        author = (String) mapYml.get("author");
        name = (String) mapYml.get("name");
        spawn = coordinates("spawn");
        gamemode = (String) mapYml.get("gamemode");

        // Pkr-specific settings
        startButton = coordinates("start_button");
        endButton = coordinates("end_button");
        // If a mat_checkpoint exists, assign it - otherwise default to diamond block
        checkpointMat = (mapYml.get("mat_checkpoint") != null) ?
                Material.getMaterial((String) mapYml.get("mat_checkpoint")) : Material.DIAMOND_BLOCK;
        // If a mat_backpoint exists, assign it - otherwise default to bedrock
        backpointMat = (mapYml.get("mat_backpoint") != null) ?
                Material.getMaterial((String) mapYml.get("mat_backpoint")) : Material.BEDROCK;

    }

    /**
     * Convenience method to get coordinates (double array) from the three-item ArrayList
     * that SnakeYaml will generate.
     *
     * @param id    The name of the coordinate array in map.yml
     */
    private double[] coordinates(String id) {

        ArrayList<Double> coordsMapYml = (ArrayList<Double>) mapYml.get(id);
        double[] coords = new double[coordsMapYml.size()];
        for(int i = 0; i < coordsMapYml.size(); i++)
            coords[i] = (double) coordsMapYml.get(i);

        return coords;

    }

}
